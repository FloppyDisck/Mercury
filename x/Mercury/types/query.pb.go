// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: Mercury/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// this line is used by starport scaffolding # 3
type QueryGetReviewRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetReviewRequest) Reset()         { *m = QueryGetReviewRequest{} }
func (m *QueryGetReviewRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetReviewRequest) ProtoMessage()    {}
func (*QueryGetReviewRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b67457eb418710e9, []int{0}
}
func (m *QueryGetReviewRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReviewRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReviewRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReviewRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReviewRequest.Merge(m, src)
}
func (m *QueryGetReviewRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReviewRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReviewRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReviewRequest proto.InternalMessageInfo

func (m *QueryGetReviewRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetReviewResponse struct {
	Review *Review `protobuf:"bytes,1,opt,name=Review,proto3" json:"Review,omitempty"`
}

func (m *QueryGetReviewResponse) Reset()         { *m = QueryGetReviewResponse{} }
func (m *QueryGetReviewResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetReviewResponse) ProtoMessage()    {}
func (*QueryGetReviewResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b67457eb418710e9, []int{1}
}
func (m *QueryGetReviewResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReviewResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReviewResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReviewResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReviewResponse.Merge(m, src)
}
func (m *QueryGetReviewResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReviewResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReviewResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReviewResponse proto.InternalMessageInfo

func (m *QueryGetReviewResponse) GetReview() *Review {
	if m != nil {
		return m.Review
	}
	return nil
}

type QueryAllReviewRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllReviewRequest) Reset()         { *m = QueryAllReviewRequest{} }
func (m *QueryAllReviewRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllReviewRequest) ProtoMessage()    {}
func (*QueryAllReviewRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b67457eb418710e9, []int{2}
}
func (m *QueryAllReviewRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllReviewRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllReviewRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllReviewRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllReviewRequest.Merge(m, src)
}
func (m *QueryAllReviewRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllReviewRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllReviewRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllReviewRequest proto.InternalMessageInfo

func (m *QueryAllReviewRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllReviewWithScoreRequest struct {
	Score      uint32             `protobuf:"varint,1,opt,name=score,proto3" json:"score,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllReviewWithScoreRequest) Reset()         { *m = QueryAllReviewWithScoreRequest{} }
func (m *QueryAllReviewWithScoreRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllReviewWithScoreRequest) ProtoMessage()    {}
func (*QueryAllReviewWithScoreRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b67457eb418710e9, []int{3}
}
func (m *QueryAllReviewWithScoreRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllReviewWithScoreRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllReviewWithScoreRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllReviewWithScoreRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllReviewWithScoreRequest.Merge(m, src)
}
func (m *QueryAllReviewWithScoreRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllReviewWithScoreRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllReviewWithScoreRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllReviewWithScoreRequest proto.InternalMessageInfo

func (m *QueryAllReviewWithScoreRequest) GetScore() uint32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *QueryAllReviewWithScoreRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllReviewWithReviewerRequest struct {
	Creator    string             `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllReviewWithReviewerRequest) Reset()         { *m = QueryAllReviewWithReviewerRequest{} }
func (m *QueryAllReviewWithReviewerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllReviewWithReviewerRequest) ProtoMessage()    {}
func (*QueryAllReviewWithReviewerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b67457eb418710e9, []int{4}
}
func (m *QueryAllReviewWithReviewerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllReviewWithReviewerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllReviewWithReviewerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllReviewWithReviewerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllReviewWithReviewerRequest.Merge(m, src)
}
func (m *QueryAllReviewWithReviewerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllReviewWithReviewerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllReviewWithReviewerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllReviewWithReviewerRequest proto.InternalMessageInfo

func (m *QueryAllReviewWithReviewerRequest) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *QueryAllReviewWithReviewerRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllReviewWithReviewedRequest struct {
	Type       string             `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Id         uint64             `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllReviewWithReviewedRequest) Reset()         { *m = QueryAllReviewWithReviewedRequest{} }
func (m *QueryAllReviewWithReviewedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllReviewWithReviewedRequest) ProtoMessage()    {}
func (*QueryAllReviewWithReviewedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b67457eb418710e9, []int{5}
}
func (m *QueryAllReviewWithReviewedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllReviewWithReviewedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllReviewWithReviewedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllReviewWithReviewedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllReviewWithReviewedRequest.Merge(m, src)
}
func (m *QueryAllReviewWithReviewedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllReviewWithReviewedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllReviewWithReviewedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllReviewWithReviewedRequest proto.InternalMessageInfo

func (m *QueryAllReviewWithReviewedRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *QueryAllReviewWithReviewedRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *QueryAllReviewWithReviewedRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllReviewResponse struct {
	Review     []*Review           `protobuf:"bytes,1,rep,name=Review,proto3" json:"Review,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllReviewResponse) Reset()         { *m = QueryAllReviewResponse{} }
func (m *QueryAllReviewResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllReviewResponse) ProtoMessage()    {}
func (*QueryAllReviewResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b67457eb418710e9, []int{6}
}
func (m *QueryAllReviewResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllReviewResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllReviewResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllReviewResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllReviewResponse.Merge(m, src)
}
func (m *QueryAllReviewResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllReviewResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllReviewResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllReviewResponse proto.InternalMessageInfo

func (m *QueryAllReviewResponse) GetReview() []*Review {
	if m != nil {
		return m.Review
	}
	return nil
}

func (m *QueryAllReviewResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPurchaseRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetPurchaseRequest) Reset()         { *m = QueryGetPurchaseRequest{} }
func (m *QueryGetPurchaseRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPurchaseRequest) ProtoMessage()    {}
func (*QueryGetPurchaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b67457eb418710e9, []int{7}
}
func (m *QueryGetPurchaseRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPurchaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPurchaseRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPurchaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPurchaseRequest.Merge(m, src)
}
func (m *QueryGetPurchaseRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPurchaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPurchaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPurchaseRequest proto.InternalMessageInfo

func (m *QueryGetPurchaseRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetPurchaseResponse struct {
	Purchase *Purchase `protobuf:"bytes,1,opt,name=Purchase,proto3" json:"Purchase,omitempty"`
}

func (m *QueryGetPurchaseResponse) Reset()         { *m = QueryGetPurchaseResponse{} }
func (m *QueryGetPurchaseResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPurchaseResponse) ProtoMessage()    {}
func (*QueryGetPurchaseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b67457eb418710e9, []int{8}
}
func (m *QueryGetPurchaseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPurchaseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPurchaseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPurchaseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPurchaseResponse.Merge(m, src)
}
func (m *QueryGetPurchaseResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPurchaseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPurchaseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPurchaseResponse proto.InternalMessageInfo

func (m *QueryGetPurchaseResponse) GetPurchase() *Purchase {
	if m != nil {
		return m.Purchase
	}
	return nil
}

type QueryAllPurchaseRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPurchaseRequest) Reset()         { *m = QueryAllPurchaseRequest{} }
func (m *QueryAllPurchaseRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPurchaseRequest) ProtoMessage()    {}
func (*QueryAllPurchaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b67457eb418710e9, []int{9}
}
func (m *QueryAllPurchaseRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPurchaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPurchaseRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPurchaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPurchaseRequest.Merge(m, src)
}
func (m *QueryAllPurchaseRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPurchaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPurchaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPurchaseRequest proto.InternalMessageInfo

func (m *QueryAllPurchaseRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPurchaseWithListingRequest struct {
	Listing    uint64             `protobuf:"varint,1,opt,name=listing,proto3" json:"listing,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPurchaseWithListingRequest) Reset()         { *m = QueryAllPurchaseWithListingRequest{} }
func (m *QueryAllPurchaseWithListingRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPurchaseWithListingRequest) ProtoMessage()    {}
func (*QueryAllPurchaseWithListingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b67457eb418710e9, []int{10}
}
func (m *QueryAllPurchaseWithListingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPurchaseWithListingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPurchaseWithListingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPurchaseWithListingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPurchaseWithListingRequest.Merge(m, src)
}
func (m *QueryAllPurchaseWithListingRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPurchaseWithListingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPurchaseWithListingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPurchaseWithListingRequest proto.InternalMessageInfo

func (m *QueryAllPurchaseWithListingRequest) GetListing() uint64 {
	if m != nil {
		return m.Listing
	}
	return 0
}

func (m *QueryAllPurchaseWithListingRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPurchaseWithBuyerRequest struct {
	Buyer      string             `protobuf:"bytes,1,opt,name=buyer,proto3" json:"buyer,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPurchaseWithBuyerRequest) Reset()         { *m = QueryAllPurchaseWithBuyerRequest{} }
func (m *QueryAllPurchaseWithBuyerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPurchaseWithBuyerRequest) ProtoMessage()    {}
func (*QueryAllPurchaseWithBuyerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b67457eb418710e9, []int{11}
}
func (m *QueryAllPurchaseWithBuyerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPurchaseWithBuyerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPurchaseWithBuyerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPurchaseWithBuyerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPurchaseWithBuyerRequest.Merge(m, src)
}
func (m *QueryAllPurchaseWithBuyerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPurchaseWithBuyerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPurchaseWithBuyerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPurchaseWithBuyerRequest proto.InternalMessageInfo

func (m *QueryAllPurchaseWithBuyerRequest) GetBuyer() string {
	if m != nil {
		return m.Buyer
	}
	return ""
}

func (m *QueryAllPurchaseWithBuyerRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPurchaseResponse struct {
	Purchase   []*Purchase         `protobuf:"bytes,1,rep,name=Purchase,proto3" json:"Purchase,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPurchaseResponse) Reset()         { *m = QueryAllPurchaseResponse{} }
func (m *QueryAllPurchaseResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPurchaseResponse) ProtoMessage()    {}
func (*QueryAllPurchaseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b67457eb418710e9, []int{12}
}
func (m *QueryAllPurchaseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPurchaseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPurchaseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPurchaseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPurchaseResponse.Merge(m, src)
}
func (m *QueryAllPurchaseResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPurchaseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPurchaseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPurchaseResponse proto.InternalMessageInfo

func (m *QueryAllPurchaseResponse) GetPurchase() []*Purchase {
	if m != nil {
		return m.Purchase
	}
	return nil
}

func (m *QueryAllPurchaseResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetListingRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetListingRequest) Reset()         { *m = QueryGetListingRequest{} }
func (m *QueryGetListingRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetListingRequest) ProtoMessage()    {}
func (*QueryGetListingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b67457eb418710e9, []int{13}
}
func (m *QueryGetListingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetListingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetListingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetListingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetListingRequest.Merge(m, src)
}
func (m *QueryGetListingRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetListingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetListingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetListingRequest proto.InternalMessageInfo

func (m *QueryGetListingRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetListingResponse struct {
	Listing *Listing `protobuf:"bytes,1,opt,name=Listing,proto3" json:"Listing,omitempty"`
}

func (m *QueryGetListingResponse) Reset()         { *m = QueryGetListingResponse{} }
func (m *QueryGetListingResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetListingResponse) ProtoMessage()    {}
func (*QueryGetListingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b67457eb418710e9, []int{14}
}
func (m *QueryGetListingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetListingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetListingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetListingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetListingResponse.Merge(m, src)
}
func (m *QueryGetListingResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetListingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetListingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetListingResponse proto.InternalMessageInfo

func (m *QueryGetListingResponse) GetListing() *Listing {
	if m != nil {
		return m.Listing
	}
	return nil
}

type QueryAllListingRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllListingRequest) Reset()         { *m = QueryAllListingRequest{} }
func (m *QueryAllListingRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllListingRequest) ProtoMessage()    {}
func (*QueryAllListingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b67457eb418710e9, []int{15}
}
func (m *QueryAllListingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllListingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllListingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllListingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllListingRequest.Merge(m, src)
}
func (m *QueryAllListingRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllListingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllListingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllListingRequest proto.InternalMessageInfo

func (m *QueryAllListingRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllListingWithSellerRequest struct {
	Seller     string             `protobuf:"bytes,1,opt,name=seller,proto3" json:"seller,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllListingWithSellerRequest) Reset()         { *m = QueryAllListingWithSellerRequest{} }
func (m *QueryAllListingWithSellerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllListingWithSellerRequest) ProtoMessage()    {}
func (*QueryAllListingWithSellerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b67457eb418710e9, []int{16}
}
func (m *QueryAllListingWithSellerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllListingWithSellerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllListingWithSellerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllListingWithSellerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllListingWithSellerRequest.Merge(m, src)
}
func (m *QueryAllListingWithSellerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllListingWithSellerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllListingWithSellerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllListingWithSellerRequest proto.InternalMessageInfo

func (m *QueryAllListingWithSellerRequest) GetSeller() string {
	if m != nil {
		return m.Seller
	}
	return ""
}

func (m *QueryAllListingWithSellerRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllListingWithReviewRequest struct {
	Review     uint32             `protobuf:"varint,1,opt,name=review,proto3" json:"review,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllListingWithReviewRequest) Reset()         { *m = QueryAllListingWithReviewRequest{} }
func (m *QueryAllListingWithReviewRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllListingWithReviewRequest) ProtoMessage()    {}
func (*QueryAllListingWithReviewRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b67457eb418710e9, []int{17}
}
func (m *QueryAllListingWithReviewRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllListingWithReviewRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllListingWithReviewRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllListingWithReviewRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllListingWithReviewRequest.Merge(m, src)
}
func (m *QueryAllListingWithReviewRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllListingWithReviewRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllListingWithReviewRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllListingWithReviewRequest proto.InternalMessageInfo

func (m *QueryAllListingWithReviewRequest) GetReview() uint32 {
	if m != nil {
		return m.Review
	}
	return 0
}

func (m *QueryAllListingWithReviewRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllListingWithNameRequest struct {
	Name       string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllListingWithNameRequest) Reset()         { *m = QueryAllListingWithNameRequest{} }
func (m *QueryAllListingWithNameRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllListingWithNameRequest) ProtoMessage()    {}
func (*QueryAllListingWithNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b67457eb418710e9, []int{18}
}
func (m *QueryAllListingWithNameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllListingWithNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllListingWithNameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllListingWithNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllListingWithNameRequest.Merge(m, src)
}
func (m *QueryAllListingWithNameRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllListingWithNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllListingWithNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllListingWithNameRequest proto.InternalMessageInfo

func (m *QueryAllListingWithNameRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryAllListingWithNameRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllListingResponse struct {
	Listing    []*Listing          `protobuf:"bytes,1,rep,name=Listing,proto3" json:"Listing,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllListingResponse) Reset()         { *m = QueryAllListingResponse{} }
func (m *QueryAllListingResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllListingResponse) ProtoMessage()    {}
func (*QueryAllListingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b67457eb418710e9, []int{19}
}
func (m *QueryAllListingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllListingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllListingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllListingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllListingResponse.Merge(m, src)
}
func (m *QueryAllListingResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllListingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllListingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllListingResponse proto.InternalMessageInfo

func (m *QueryAllListingResponse) GetListing() []*Listing {
	if m != nil {
		return m.Listing
	}
	return nil
}

func (m *QueryAllListingResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetAccountRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetAccountRequest) Reset()         { *m = QueryGetAccountRequest{} }
func (m *QueryGetAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAccountRequest) ProtoMessage()    {}
func (*QueryGetAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b67457eb418710e9, []int{20}
}
func (m *QueryGetAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAccountRequest.Merge(m, src)
}
func (m *QueryGetAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAccountRequest proto.InternalMessageInfo

func (m *QueryGetAccountRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetAccountWithWalletRequest struct {
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
}

func (m *QueryGetAccountWithWalletRequest) Reset()         { *m = QueryGetAccountWithWalletRequest{} }
func (m *QueryGetAccountWithWalletRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAccountWithWalletRequest) ProtoMessage()    {}
func (*QueryGetAccountWithWalletRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b67457eb418710e9, []int{21}
}
func (m *QueryGetAccountWithWalletRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAccountWithWalletRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAccountWithWalletRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAccountWithWalletRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAccountWithWalletRequest.Merge(m, src)
}
func (m *QueryGetAccountWithWalletRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAccountWithWalletRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAccountWithWalletRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAccountWithWalletRequest proto.InternalMessageInfo

func (m *QueryGetAccountWithWalletRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type QueryGetAccountResponse struct {
	Account *Account `protobuf:"bytes,1,opt,name=Account,proto3" json:"Account,omitempty"`
}

func (m *QueryGetAccountResponse) Reset()         { *m = QueryGetAccountResponse{} }
func (m *QueryGetAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAccountResponse) ProtoMessage()    {}
func (*QueryGetAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b67457eb418710e9, []int{22}
}
func (m *QueryGetAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAccountResponse.Merge(m, src)
}
func (m *QueryGetAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAccountResponse proto.InternalMessageInfo

func (m *QueryGetAccountResponse) GetAccount() *Account {
	if m != nil {
		return m.Account
	}
	return nil
}

type QueryAllAccountRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAccountRequest) Reset()         { *m = QueryAllAccountRequest{} }
func (m *QueryAllAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAccountRequest) ProtoMessage()    {}
func (*QueryAllAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b67457eb418710e9, []int{23}
}
func (m *QueryAllAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAccountRequest.Merge(m, src)
}
func (m *QueryAllAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAccountRequest proto.InternalMessageInfo

func (m *QueryAllAccountRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllAccountWithNameRequest struct {
	Name       string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAccountWithNameRequest) Reset()         { *m = QueryAllAccountWithNameRequest{} }
func (m *QueryAllAccountWithNameRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAccountWithNameRequest) ProtoMessage()    {}
func (*QueryAllAccountWithNameRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b67457eb418710e9, []int{24}
}
func (m *QueryAllAccountWithNameRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAccountWithNameRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAccountWithNameRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAccountWithNameRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAccountWithNameRequest.Merge(m, src)
}
func (m *QueryAllAccountWithNameRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAccountWithNameRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAccountWithNameRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAccountWithNameRequest proto.InternalMessageInfo

func (m *QueryAllAccountWithNameRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *QueryAllAccountWithNameRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllAccountWithReviewRequest struct {
	Review     uint32             `protobuf:"varint,1,opt,name=review,proto3" json:"review,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAccountWithReviewRequest) Reset()         { *m = QueryAllAccountWithReviewRequest{} }
func (m *QueryAllAccountWithReviewRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAccountWithReviewRequest) ProtoMessage()    {}
func (*QueryAllAccountWithReviewRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b67457eb418710e9, []int{25}
}
func (m *QueryAllAccountWithReviewRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAccountWithReviewRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAccountWithReviewRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAccountWithReviewRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAccountWithReviewRequest.Merge(m, src)
}
func (m *QueryAllAccountWithReviewRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAccountWithReviewRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAccountWithReviewRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAccountWithReviewRequest proto.InternalMessageInfo

func (m *QueryAllAccountWithReviewRequest) GetReview() uint32 {
	if m != nil {
		return m.Review
	}
	return 0
}

func (m *QueryAllAccountWithReviewRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllAccountResponse struct {
	Account    []*Account          `protobuf:"bytes,1,rep,name=Account,proto3" json:"Account,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAccountResponse) Reset()         { *m = QueryAllAccountResponse{} }
func (m *QueryAllAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllAccountResponse) ProtoMessage()    {}
func (*QueryAllAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b67457eb418710e9, []int{26}
}
func (m *QueryAllAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAccountResponse.Merge(m, src)
}
func (m *QueryAllAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAccountResponse proto.InternalMessageInfo

func (m *QueryAllAccountResponse) GetAccount() []*Account {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *QueryAllAccountResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetReviewRequest)(nil), "FloppyDisck.Mercury.Mercury.QueryGetReviewRequest")
	proto.RegisterType((*QueryGetReviewResponse)(nil), "FloppyDisck.Mercury.Mercury.QueryGetReviewResponse")
	proto.RegisterType((*QueryAllReviewRequest)(nil), "FloppyDisck.Mercury.Mercury.QueryAllReviewRequest")
	proto.RegisterType((*QueryAllReviewWithScoreRequest)(nil), "FloppyDisck.Mercury.Mercury.QueryAllReviewWithScoreRequest")
	proto.RegisterType((*QueryAllReviewWithReviewerRequest)(nil), "FloppyDisck.Mercury.Mercury.QueryAllReviewWithReviewerRequest")
	proto.RegisterType((*QueryAllReviewWithReviewedRequest)(nil), "FloppyDisck.Mercury.Mercury.QueryAllReviewWithReviewedRequest")
	proto.RegisterType((*QueryAllReviewResponse)(nil), "FloppyDisck.Mercury.Mercury.QueryAllReviewResponse")
	proto.RegisterType((*QueryGetPurchaseRequest)(nil), "FloppyDisck.Mercury.Mercury.QueryGetPurchaseRequest")
	proto.RegisterType((*QueryGetPurchaseResponse)(nil), "FloppyDisck.Mercury.Mercury.QueryGetPurchaseResponse")
	proto.RegisterType((*QueryAllPurchaseRequest)(nil), "FloppyDisck.Mercury.Mercury.QueryAllPurchaseRequest")
	proto.RegisterType((*QueryAllPurchaseWithListingRequest)(nil), "FloppyDisck.Mercury.Mercury.QueryAllPurchaseWithListingRequest")
	proto.RegisterType((*QueryAllPurchaseWithBuyerRequest)(nil), "FloppyDisck.Mercury.Mercury.QueryAllPurchaseWithBuyerRequest")
	proto.RegisterType((*QueryAllPurchaseResponse)(nil), "FloppyDisck.Mercury.Mercury.QueryAllPurchaseResponse")
	proto.RegisterType((*QueryGetListingRequest)(nil), "FloppyDisck.Mercury.Mercury.QueryGetListingRequest")
	proto.RegisterType((*QueryGetListingResponse)(nil), "FloppyDisck.Mercury.Mercury.QueryGetListingResponse")
	proto.RegisterType((*QueryAllListingRequest)(nil), "FloppyDisck.Mercury.Mercury.QueryAllListingRequest")
	proto.RegisterType((*QueryAllListingWithSellerRequest)(nil), "FloppyDisck.Mercury.Mercury.QueryAllListingWithSellerRequest")
	proto.RegisterType((*QueryAllListingWithReviewRequest)(nil), "FloppyDisck.Mercury.Mercury.QueryAllListingWithReviewRequest")
	proto.RegisterType((*QueryAllListingWithNameRequest)(nil), "FloppyDisck.Mercury.Mercury.QueryAllListingWithNameRequest")
	proto.RegisterType((*QueryAllListingResponse)(nil), "FloppyDisck.Mercury.Mercury.QueryAllListingResponse")
	proto.RegisterType((*QueryGetAccountRequest)(nil), "FloppyDisck.Mercury.Mercury.QueryGetAccountRequest")
	proto.RegisterType((*QueryGetAccountWithWalletRequest)(nil), "FloppyDisck.Mercury.Mercury.QueryGetAccountWithWalletRequest")
	proto.RegisterType((*QueryGetAccountResponse)(nil), "FloppyDisck.Mercury.Mercury.QueryGetAccountResponse")
	proto.RegisterType((*QueryAllAccountRequest)(nil), "FloppyDisck.Mercury.Mercury.QueryAllAccountRequest")
	proto.RegisterType((*QueryAllAccountWithNameRequest)(nil), "FloppyDisck.Mercury.Mercury.QueryAllAccountWithNameRequest")
	proto.RegisterType((*QueryAllAccountWithReviewRequest)(nil), "FloppyDisck.Mercury.Mercury.QueryAllAccountWithReviewRequest")
	proto.RegisterType((*QueryAllAccountResponse)(nil), "FloppyDisck.Mercury.Mercury.QueryAllAccountResponse")
}

func init() { proto.RegisterFile("Mercury/query.proto", fileDescriptor_b67457eb418710e9) }

var fileDescriptor_b67457eb418710e9 = []byte{
	// 1271 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x59, 0xcf, 0x6f, 0xdc, 0x44,
	0x14, 0xee, 0x64, 0x9b, 0x94, 0x4e, 0x14, 0x10, 0xd3, 0x34, 0x44, 0x29, 0x5a, 0x15, 0xb7, 0x69,
	0xd2, 0xb4, 0xd8, 0xcd, 0x66, 0x1b, 0x5a, 0x02, 0xa9, 0xb6, 0x42, 0x2d, 0x87, 0x82, 0xca, 0x22,
	0x54, 0x81, 0x84, 0xc0, 0xbb, 0x3b, 0x6c, 0x2c, 0xbc, 0xeb, 0xad, 0xed, 0x6d, 0x59, 0x2d, 0x8b,
	0x50, 0x25, 0xb8, 0x82, 0xc4, 0x1d, 0x09, 0x10, 0x20, 0xc4, 0xff, 0x80, 0x38, 0xf1, 0xe3, 0x82,
	0x2a, 0x71, 0xe1, 0x58, 0x25, 0xfc, 0x21, 0xc8, 0x33, 0x6f, 0xd6, 0xde, 0xb1, 0xd7, 0x8c, 0x8d,
	0xc9, 0x25, 0xf6, 0x8c, 0x66, 0xe6, 0x7d, 0xef, 0xcd, 0xf7, 0x9e, 0xdf, 0xb7, 0xc1, 0x27, 0x5e,
	0xa1, 0x6e, 0xb3, 0xef, 0x0e, 0x8c, 0xbb, 0x7d, 0xea, 0x0e, 0xf4, 0x9e, 0xeb, 0xf8, 0x0e, 0x39,
	0x75, 0xc3, 0x76, 0x7a, 0xbd, 0xc1, 0x4b, 0x96, 0xd7, 0x7c, 0x5f, 0x87, 0x05, 0xe2, 0xb9, 0xf2,
	0x74, 0xdb, 0x71, 0xda, 0x36, 0x35, 0xcc, 0x9e, 0x65, 0x98, 0xdd, 0xae, 0xe3, 0x9b, 0xbe, 0xe5,
	0x74, 0x3d, 0xbe, 0x75, 0x65, 0xa3, 0xe9, 0x78, 0x1d, 0xc7, 0x33, 0x1a, 0xa6, 0x47, 0xf9, 0x99,
	0xc6, 0xbd, 0xcd, 0x06, 0xf5, 0xcd, 0x4d, 0xa3, 0x67, 0xb6, 0xad, 0x2e, 0x5b, 0x0c, 0x6b, 0x17,
	0x85, 0x6d, 0x97, 0xde, 0xb3, 0xe8, 0x7d, 0x98, 0x5d, 0x12, 0xb3, 0xbd, 0xbe, 0xdb, 0xdc, 0x33,
	0x3d, 0x0a, 0xf3, 0x27, 0xc5, 0xbc, 0x6d, 0x79, 0xbe, 0xd5, 0x6d, 0xcb, 0xd3, 0x66, 0xb3, 0xe9,
	0xf4, 0xbb, 0x3e, 0x9f, 0xd6, 0xd6, 0xf0, 0xc9, 0xd7, 0x02, 0xeb, 0x37, 0xa9, 0x5f, 0x67, 0xa7,
	0xd7, 0xe9, 0xdd, 0x3e, 0xf5, 0x7c, 0xf2, 0x38, 0x9e, 0xb1, 0x5a, 0xcb, 0xe8, 0x34, 0x5a, 0x3f,
	0x5a, 0x9f, 0xb1, 0x5a, 0xda, 0x1b, 0x78, 0x49, 0x5e, 0xe8, 0xf5, 0x9c, 0xae, 0x47, 0xc9, 0x0e,
	0x9e, 0xe3, 0x33, 0x6c, 0xf5, 0x7c, 0xe5, 0x8c, 0x9e, 0x12, 0x16, 0x1d, 0x36, 0xc3, 0x16, 0xed,
	0x1d, 0xb0, 0x5f, 0xb3, 0xed, 0x49, 0xfb, 0x37, 0x30, 0x0e, 0x03, 0x01, 0x27, 0x9f, 0xd3, 0x79,
	0xd4, 0xf4, 0x20, 0x6a, 0x3a, 0xbf, 0x09, 0x88, 0x9a, 0x7e, 0xdb, 0x6c, 0x53, 0xd8, 0x5b, 0x8f,
	0xec, 0xd4, 0x3e, 0xc2, 0xe5, 0x49, 0x03, 0x77, 0x2c, 0x7f, 0xef, 0xf5, 0xa6, 0xe3, 0x8a, 0xd5,
	0x64, 0x11, 0xcf, 0x7a, 0xc1, 0x98, 0x19, 0x59, 0xa8, 0xf3, 0x81, 0x64, 0x7f, 0x26, 0xb7, 0xfd,
	0x4f, 0x10, 0x7e, 0x26, 0x0e, 0x80, 0xbf, 0x51, 0x57, 0x60, 0x58, 0xc6, 0xc7, 0x9a, 0x2e, 0x35,
	0x7d, 0xc7, 0x65, 0x28, 0x8e, 0xd7, 0xc5, 0xb0, 0x30, 0x1c, 0x9f, 0xa5, 0xe1, 0x68, 0x09, 0x1c,
	0x04, 0x1f, 0xf5, 0x07, 0x3d, 0x0a, 0x20, 0xd8, 0x3b, 0x30, 0x61, 0x46, 0x30, 0x41, 0x42, 0x54,
	0xca, 0x8d, 0xe8, 0x4b, 0x04, 0x94, 0x8a, 0xdc, 0x7d, 0x02, 0xa5, 0x4a, 0x19, 0x29, 0x45, 0x6e,
	0x26, 0x44, 0x6c, 0xed, 0x5f, 0xf1, 0x71, 0xcb, 0x13, 0x00, 0xcf, 0xe3, 0xa7, 0x04, 0xe5, 0x6f,
	0x43, 0x8e, 0x4d, 0xcb, 0x8e, 0xb7, 0xf1, 0x72, 0x7c, 0x29, 0x38, 0x53, 0xc3, 0x8f, 0x89, 0x39,
	0xe0, 0xf1, 0x6a, 0xaa, 0x3b, 0xe3, 0x03, 0xc6, 0xdb, 0x34, 0x13, 0x90, 0xd4, 0x6c, 0x5b, 0x46,
	0x52, 0x54, 0x9e, 0x7c, 0x8a, 0xb0, 0x26, 0xdb, 0x08, 0x18, 0x72, 0x8b, 0x57, 0x91, 0x08, 0x51,
	0xa1, 0xae, 0x80, 0xf7, 0x62, 0x58, 0x18, 0x51, 0x3f, 0x46, 0xf8, 0x74, 0x12, 0x90, 0xeb, 0xfd,
	0x41, 0x98, 0x2f, 0x8b, 0x78, 0xb6, 0x11, 0x8c, 0x81, 0xa8, 0x7c, 0x50, 0x18, 0x84, 0xef, 0x10,
	0x5c, 0xe7, 0x44, 0xbc, 0x13, 0xaf, 0xb3, 0x94, 0xe3, 0x3a, 0x8b, 0x63, 0xe8, 0x7a, 0x58, 0x94,
	0xa5, 0x7b, 0x92, 0x09, 0xfa, 0x66, 0xc8, 0xe5, 0xf1, 0x4a, 0x70, 0x68, 0x17, 0x1f, 0xbb, 0x15,
	0xb9, 0xd2, 0xf9, 0xca, 0xd9, 0x54, 0x7f, 0xc4, 0x76, 0xb1, 0x49, 0x7b, 0x37, 0x4c, 0x63, 0x09,
	0x44, 0x51, 0xdc, 0x7c, 0x10, 0xa1, 0x04, 0x98, 0x60, 0x55, 0x9c, 0xda, 0x76, 0x48, 0x89, 0x25,
	0x3c, 0xe7, 0xb1, 0x09, 0xe0, 0x04, 0x8c, 0x0a, 0x23, 0xc5, 0x14, 0x10, 0x93, 0x5f, 0xad, 0x25,
	0x3c, 0xe7, 0x86, 0xdf, 0xc2, 0x85, 0x3a, 0x8c, 0x0a, 0x03, 0xf1, 0x61, 0xf8, 0x35, 0x8b, 0x60,
	0x78, 0xd5, 0xec, 0xd0, 0x48, 0x05, 0xef, 0x9a, 0x9d, 0x71, 0x05, 0x0f, 0xde, 0x0b, 0xb3, 0xfe,
	0x35, 0x0a, 0xeb, 0x50, 0x2a, 0x8b, 0x4a, 0x99, 0x59, 0xf4, 0xbf, 0xe4, 0x44, 0x8d, 0xb7, 0x3a,
	0xd3, 0x72, 0x62, 0x1b, 0x2e, 0x34, 0x5c, 0x19, 0x04, 0xf3, 0x8e, 0x69, 0xdb, 0xd4, 0x8f, 0x84,
	0xb3, 0xef, 0x8d, 0x39, 0xc5, 0xde, 0xa3, 0xb9, 0x34, 0xb6, 0x10, 0x46, 0x01, 0xa6, 0x94, 0x72,
	0x49, 0x6c, 0x17, 0x9b, 0xa2, 0xb9, 0x24, 0x81, 0x2f, 0x2a, 0x97, 0x22, 0x0c, 0x8a, 0x38, 0x7d,
	0x58, 0x0c, 0x8a, 0x26, 0x51, 0xc4, 0xfc, 0xe1, 0x26, 0x51, 0x94, 0xc6, 0xa9, 0x17, 0x58, 0xca,
	0x7c, 0x81, 0x85, 0xd1, 0xb8, 0xf2, 0xe8, 0x14, 0x9e, 0x65, 0x20, 0xc9, 0x37, 0x48, 0x74, 0x43,
	0xa4, 0x92, 0x0a, 0x26, 0xb1, 0x91, 0x5f, 0xd9, 0xca, 0xb4, 0x87, 0x23, 0xd1, 0x2e, 0x3d, 0xf8,
	0xf3, 0xef, 0x2f, 0x66, 0x36, 0xc8, 0xba, 0x11, 0xd9, 0x6c, 0x08, 0x09, 0x31, 0xa9, 0x47, 0x8c,
	0xa1, 0xd5, 0x1a, 0x91, 0xaf, 0x10, 0x3e, 0xce, 0x0f, 0xa9, 0xd9, 0xb6, 0x0a, 0x50, 0xb9, 0xe3,
	0x57, 0x01, 0x1a, 0xeb, 0x14, 0xb5, 0x0b, 0x0c, 0xe8, 0x2a, 0x39, 0xa3, 0x00, 0x94, 0xfc, 0x84,
	0xf0, 0x13, 0x92, 0x08, 0x20, 0x3b, 0x19, 0xac, 0xca, 0xd2, 0x21, 0x1f, 0xe4, 0xab, 0x0c, 0xf2,
	0x16, 0xd9, 0x54, 0x89, 0x2d, 0x13, 0x23, 0xc6, 0x90, 0x3d, 0x46, 0xe4, 0x77, 0x84, 0x49, 0x5c,
	0x44, 0x90, 0xdd, 0x8c, 0x3e, 0x48, 0xea, 0x23, 0x9f, 0x1b, 0xbb, 0xcc, 0x8d, 0x2b, 0x64, 0x5b,
	0xc5, 0x0d, 0x17, 0x2c, 0x1a, 0x43, 0xd0, 0x35, 0x23, 0xf2, 0x6b, 0x92, 0x2f, 0xad, 0xbc, 0xbe,
	0xb4, 0xfe, 0x93, 0x2f, 0x2f, 0x30, 0x5f, 0xb6, 0x49, 0x55, 0xc5, 0x97, 0xf7, 0x5c, 0xa7, 0x63,
	0x0c, 0x03, 0x69, 0x34, 0xe2, 0xd4, 0xff, 0x11, 0x85, 0x2d, 0x21, 0xa9, 0x2a, 0xa5, 0x9b, 0xd4,
	0xc5, 0xaf, 0x5c, 0xce, 0xb8, 0x0b, 0x70, 0x57, 0x18, 0xee, 0x8b, 0x64, 0x23, 0x15, 0xb7, 0xf8,
	0x81, 0x80, 0xa3, 0xfd, 0x01, 0xe1, 0x79, 0x71, 0x50, 0x90, 0xaa, 0x55, 0xa5, 0x80, 0xe5, 0x00,
	0x9c, 0xd0, 0x3c, 0x6b, 0xcf, 0x32, 0xc0, 0x6b, 0x64, 0x55, 0x09, 0x30, 0xf9, 0x03, 0xe1, 0x13,
	0x09, 0x62, 0x84, 0x5c, 0xcb, 0x64, 0x3d, 0x2e, 0x63, 0xf2, 0xc2, 0xbf, 0xc6, 0xe0, 0x5f, 0x25,
	0xcf, 0xa9, 0xc5, 0x1b, 0xa4, 0x91, 0x31, 0x84, 0x97, 0x11, 0xf9, 0x05, 0xe1, 0x27, 0x63, 0xa2,
	0x86, 0xbc, 0x98, 0xd9, 0x9d, 0xa8, 0x18, 0xca, 0xeb, 0xcc, 0x0e, 0x73, 0xe6, 0x32, 0xd9, 0x52,
	0x73, 0x86, 0x49, 0x2c, 0x63, 0xc8, 0x1e, 0x23, 0xf2, 0x3d, 0x1a, 0xf7, 0x7b, 0x44, 0xed, 0x0b,
	0x23, 0xdd, 0x40, 0x35, 0xdb, 0x26, 0xc0, 0xbc, 0xc9, 0x30, 0x5f, 0x20, 0xe7, 0x53, 0x31, 0x8f,
	0xe3, 0x1e, 0xf0, 0xfd, 0x5b, 0x84, 0x31, 0x1c, 0x13, 0xd0, 0x5d, 0xad, 0x3e, 0x64, 0x07, 0x1b,
	0x6f, 0x89, 0xb5, 0x8b, 0x0c, 0xec, 0x39, 0x72, 0x56, 0x05, 0x2c, 0xa3, 0x46, 0x4c, 0xdc, 0x28,
	0x52, 0x63, 0x9a, 0x28, 0xca, 0x09, 0x5c, 0xad, 0x1c, 0x8a, 0x28, 0x73, 0x9d, 0x65, 0x0c, 0xf9,
	0x73, 0x24, 0x3b, 0x02, 0xad, 0x4b, 0x66, 0x47, 0x26, 0x9b, 0x83, 0xc3, 0x70, 0x44, 0xb4, 0x33,
	0xfc, 0x39, 0x62, 0xed, 0x82, 0xa4, 0xb2, 0x14, 0xdb, 0x85, 0x64, 0x6d, 0x96, 0xd3, 0x89, 0x2b,
	0xcc, 0x89, 0x0a, 0xb9, 0xa4, 0xe4, 0x44, 0xd0, 0xae, 0x1b, 0xc3, 0xe0, 0x2f, 0x4f, 0x52, 0xd1,
	0x98, 0xaa, 0x25, 0xe9, 0xa4, 0xe8, 0x50, 0x4c, 0x52, 0xa9, 0x87, 0x56, 0x4c, 0x52, 0xf8, 0x1d,
	0x9a, 0x27, 0xe9, 0xcf, 0x08, 0x2f, 0x08, 0x3d, 0xc0, 0xf4, 0x97, 0x0a, 0x5f, 0x52, 0x74, 0x5b,
	0x4e, 0xe4, 0xcf, 0x33, 0xe4, 0x55, 0x52, 0x51, 0x42, 0x7e, 0x9f, 0x59, 0x34, 0x86, 0x81, 0x28,
	0xe4, 0x75, 0x06, 0xce, 0x53, 0xaf, 0x33, 0xd9, 0xe3, 0x1d, 0xd7, 0x2c, 0x8a, 0x75, 0x06, 0x50,
	0x33, 0x56, 0x4b, 0xca, 0x4f, 0x91, 0xd5, 0xc9, 0x7a, 0x31, 0x27, 0x68, 0x35, 0x56, 0x8b, 0x50,
	0x47, 0x59, 0x1d, 0xd4, 0x97, 0x98, 0x76, 0x54, 0xac, 0x2f, 0xd3, 0x34, 0x67, 0x4e, 0x27, 0xd4,
	0xea, 0x8b, 0x70, 0x42, 0xaa, 0x2f, 0xd7, 0x5f, 0xfe, 0x6d, 0xbf, 0x8c, 0x1e, 0xee, 0x97, 0xd1,
	0xa3, 0xfd, 0x32, 0xfa, 0xfc, 0xa0, 0x7c, 0xe4, 0xe1, 0x41, 0xf9, 0xc8, 0x5f, 0x07, 0xe5, 0x23,
	0x6f, 0xe9, 0x6d, 0xcb, 0xdf, 0xeb, 0x37, 0xf4, 0xa6, 0xd3, 0x49, 0x3c, 0xf9, 0x83, 0xf1, 0x5b,
	0xd0, 0x86, 0x7a, 0x8d, 0x39, 0xf6, 0xcf, 0x9c, 0xad, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xf4,
	0x35, 0xbc, 0xf6, 0xa6, 0x1a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// this line is used by starport scaffolding # 2
	Review(ctx context.Context, in *QueryGetReviewRequest, opts ...grpc.CallOption) (*QueryGetReviewResponse, error)
	ReviewAll(ctx context.Context, in *QueryAllReviewRequest, opts ...grpc.CallOption) (*QueryAllReviewResponse, error)
	ReviewWithScore(ctx context.Context, in *QueryAllReviewWithScoreRequest, opts ...grpc.CallOption) (*QueryAllReviewResponse, error)
	ReviewWithReviewer(ctx context.Context, in *QueryAllReviewWithReviewerRequest, opts ...grpc.CallOption) (*QueryAllReviewResponse, error)
	ReviewWithReviewed(ctx context.Context, in *QueryAllReviewWithReviewedRequest, opts ...grpc.CallOption) (*QueryAllReviewResponse, error)
	Purchase(ctx context.Context, in *QueryGetPurchaseRequest, opts ...grpc.CallOption) (*QueryGetPurchaseResponse, error)
	PurchaseAll(ctx context.Context, in *QueryAllPurchaseRequest, opts ...grpc.CallOption) (*QueryAllPurchaseResponse, error)
	PurchaseWithListing(ctx context.Context, in *QueryAllPurchaseWithListingRequest, opts ...grpc.CallOption) (*QueryAllPurchaseResponse, error)
	PurchaseWithBuyer(ctx context.Context, in *QueryAllPurchaseWithBuyerRequest, opts ...grpc.CallOption) (*QueryAllPurchaseResponse, error)
	Listing(ctx context.Context, in *QueryGetListingRequest, opts ...grpc.CallOption) (*QueryGetListingResponse, error)
	ListingAll(ctx context.Context, in *QueryAllListingRequest, opts ...grpc.CallOption) (*QueryAllListingResponse, error)
	ListingWithSeller(ctx context.Context, in *QueryAllListingWithSellerRequest, opts ...grpc.CallOption) (*QueryAllListingResponse, error)
	ListingWithReview(ctx context.Context, in *QueryAllListingWithReviewRequest, opts ...grpc.CallOption) (*QueryAllListingResponse, error)
	ListingWithName(ctx context.Context, in *QueryAllListingWithNameRequest, opts ...grpc.CallOption) (*QueryAllListingResponse, error)
	Account(ctx context.Context, in *QueryGetAccountRequest, opts ...grpc.CallOption) (*QueryGetAccountResponse, error)
	AccountWallet(ctx context.Context, in *QueryGetAccountWithWalletRequest, opts ...grpc.CallOption) (*QueryGetAccountResponse, error)
	AccountAll(ctx context.Context, in *QueryAllAccountRequest, opts ...grpc.CallOption) (*QueryAllAccountResponse, error)
	AccountWithName(ctx context.Context, in *QueryAllAccountWithNameRequest, opts ...grpc.CallOption) (*QueryAllAccountResponse, error)
	AccountWithReview(ctx context.Context, in *QueryAllAccountWithReviewRequest, opts ...grpc.CallOption) (*QueryAllAccountResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Review(ctx context.Context, in *QueryGetReviewRequest, opts ...grpc.CallOption) (*QueryGetReviewResponse, error) {
	out := new(QueryGetReviewResponse)
	err := c.cc.Invoke(ctx, "/FloppyDisck.Mercury.Mercury.Query/Review", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ReviewAll(ctx context.Context, in *QueryAllReviewRequest, opts ...grpc.CallOption) (*QueryAllReviewResponse, error) {
	out := new(QueryAllReviewResponse)
	err := c.cc.Invoke(ctx, "/FloppyDisck.Mercury.Mercury.Query/ReviewAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ReviewWithScore(ctx context.Context, in *QueryAllReviewWithScoreRequest, opts ...grpc.CallOption) (*QueryAllReviewResponse, error) {
	out := new(QueryAllReviewResponse)
	err := c.cc.Invoke(ctx, "/FloppyDisck.Mercury.Mercury.Query/ReviewWithScore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ReviewWithReviewer(ctx context.Context, in *QueryAllReviewWithReviewerRequest, opts ...grpc.CallOption) (*QueryAllReviewResponse, error) {
	out := new(QueryAllReviewResponse)
	err := c.cc.Invoke(ctx, "/FloppyDisck.Mercury.Mercury.Query/ReviewWithReviewer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ReviewWithReviewed(ctx context.Context, in *QueryAllReviewWithReviewedRequest, opts ...grpc.CallOption) (*QueryAllReviewResponse, error) {
	out := new(QueryAllReviewResponse)
	err := c.cc.Invoke(ctx, "/FloppyDisck.Mercury.Mercury.Query/ReviewWithReviewed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Purchase(ctx context.Context, in *QueryGetPurchaseRequest, opts ...grpc.CallOption) (*QueryGetPurchaseResponse, error) {
	out := new(QueryGetPurchaseResponse)
	err := c.cc.Invoke(ctx, "/FloppyDisck.Mercury.Mercury.Query/Purchase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PurchaseAll(ctx context.Context, in *QueryAllPurchaseRequest, opts ...grpc.CallOption) (*QueryAllPurchaseResponse, error) {
	out := new(QueryAllPurchaseResponse)
	err := c.cc.Invoke(ctx, "/FloppyDisck.Mercury.Mercury.Query/PurchaseAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PurchaseWithListing(ctx context.Context, in *QueryAllPurchaseWithListingRequest, opts ...grpc.CallOption) (*QueryAllPurchaseResponse, error) {
	out := new(QueryAllPurchaseResponse)
	err := c.cc.Invoke(ctx, "/FloppyDisck.Mercury.Mercury.Query/PurchaseWithListing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PurchaseWithBuyer(ctx context.Context, in *QueryAllPurchaseWithBuyerRequest, opts ...grpc.CallOption) (*QueryAllPurchaseResponse, error) {
	out := new(QueryAllPurchaseResponse)
	err := c.cc.Invoke(ctx, "/FloppyDisck.Mercury.Mercury.Query/PurchaseWithBuyer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Listing(ctx context.Context, in *QueryGetListingRequest, opts ...grpc.CallOption) (*QueryGetListingResponse, error) {
	out := new(QueryGetListingResponse)
	err := c.cc.Invoke(ctx, "/FloppyDisck.Mercury.Mercury.Query/Listing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListingAll(ctx context.Context, in *QueryAllListingRequest, opts ...grpc.CallOption) (*QueryAllListingResponse, error) {
	out := new(QueryAllListingResponse)
	err := c.cc.Invoke(ctx, "/FloppyDisck.Mercury.Mercury.Query/ListingAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListingWithSeller(ctx context.Context, in *QueryAllListingWithSellerRequest, opts ...grpc.CallOption) (*QueryAllListingResponse, error) {
	out := new(QueryAllListingResponse)
	err := c.cc.Invoke(ctx, "/FloppyDisck.Mercury.Mercury.Query/ListingWithSeller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListingWithReview(ctx context.Context, in *QueryAllListingWithReviewRequest, opts ...grpc.CallOption) (*QueryAllListingResponse, error) {
	out := new(QueryAllListingResponse)
	err := c.cc.Invoke(ctx, "/FloppyDisck.Mercury.Mercury.Query/ListingWithReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListingWithName(ctx context.Context, in *QueryAllListingWithNameRequest, opts ...grpc.CallOption) (*QueryAllListingResponse, error) {
	out := new(QueryAllListingResponse)
	err := c.cc.Invoke(ctx, "/FloppyDisck.Mercury.Mercury.Query/ListingWithName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Account(ctx context.Context, in *QueryGetAccountRequest, opts ...grpc.CallOption) (*QueryGetAccountResponse, error) {
	out := new(QueryGetAccountResponse)
	err := c.cc.Invoke(ctx, "/FloppyDisck.Mercury.Mercury.Query/Account", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AccountWallet(ctx context.Context, in *QueryGetAccountWithWalletRequest, opts ...grpc.CallOption) (*QueryGetAccountResponse, error) {
	out := new(QueryGetAccountResponse)
	err := c.cc.Invoke(ctx, "/FloppyDisck.Mercury.Mercury.Query/AccountWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AccountAll(ctx context.Context, in *QueryAllAccountRequest, opts ...grpc.CallOption) (*QueryAllAccountResponse, error) {
	out := new(QueryAllAccountResponse)
	err := c.cc.Invoke(ctx, "/FloppyDisck.Mercury.Mercury.Query/AccountAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AccountWithName(ctx context.Context, in *QueryAllAccountWithNameRequest, opts ...grpc.CallOption) (*QueryAllAccountResponse, error) {
	out := new(QueryAllAccountResponse)
	err := c.cc.Invoke(ctx, "/FloppyDisck.Mercury.Mercury.Query/AccountWithName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AccountWithReview(ctx context.Context, in *QueryAllAccountWithReviewRequest, opts ...grpc.CallOption) (*QueryAllAccountResponse, error) {
	out := new(QueryAllAccountResponse)
	err := c.cc.Invoke(ctx, "/FloppyDisck.Mercury.Mercury.Query/AccountWithReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// this line is used by starport scaffolding # 2
	Review(context.Context, *QueryGetReviewRequest) (*QueryGetReviewResponse, error)
	ReviewAll(context.Context, *QueryAllReviewRequest) (*QueryAllReviewResponse, error)
	ReviewWithScore(context.Context, *QueryAllReviewWithScoreRequest) (*QueryAllReviewResponse, error)
	ReviewWithReviewer(context.Context, *QueryAllReviewWithReviewerRequest) (*QueryAllReviewResponse, error)
	ReviewWithReviewed(context.Context, *QueryAllReviewWithReviewedRequest) (*QueryAllReviewResponse, error)
	Purchase(context.Context, *QueryGetPurchaseRequest) (*QueryGetPurchaseResponse, error)
	PurchaseAll(context.Context, *QueryAllPurchaseRequest) (*QueryAllPurchaseResponse, error)
	PurchaseWithListing(context.Context, *QueryAllPurchaseWithListingRequest) (*QueryAllPurchaseResponse, error)
	PurchaseWithBuyer(context.Context, *QueryAllPurchaseWithBuyerRequest) (*QueryAllPurchaseResponse, error)
	Listing(context.Context, *QueryGetListingRequest) (*QueryGetListingResponse, error)
	ListingAll(context.Context, *QueryAllListingRequest) (*QueryAllListingResponse, error)
	ListingWithSeller(context.Context, *QueryAllListingWithSellerRequest) (*QueryAllListingResponse, error)
	ListingWithReview(context.Context, *QueryAllListingWithReviewRequest) (*QueryAllListingResponse, error)
	ListingWithName(context.Context, *QueryAllListingWithNameRequest) (*QueryAllListingResponse, error)
	Account(context.Context, *QueryGetAccountRequest) (*QueryGetAccountResponse, error)
	AccountWallet(context.Context, *QueryGetAccountWithWalletRequest) (*QueryGetAccountResponse, error)
	AccountAll(context.Context, *QueryAllAccountRequest) (*QueryAllAccountResponse, error)
	AccountWithName(context.Context, *QueryAllAccountWithNameRequest) (*QueryAllAccountResponse, error)
	AccountWithReview(context.Context, *QueryAllAccountWithReviewRequest) (*QueryAllAccountResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Review(ctx context.Context, req *QueryGetReviewRequest) (*QueryGetReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Review not implemented")
}
func (*UnimplementedQueryServer) ReviewAll(ctx context.Context, req *QueryAllReviewRequest) (*QueryAllReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewAll not implemented")
}
func (*UnimplementedQueryServer) ReviewWithScore(ctx context.Context, req *QueryAllReviewWithScoreRequest) (*QueryAllReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewWithScore not implemented")
}
func (*UnimplementedQueryServer) ReviewWithReviewer(ctx context.Context, req *QueryAllReviewWithReviewerRequest) (*QueryAllReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewWithReviewer not implemented")
}
func (*UnimplementedQueryServer) ReviewWithReviewed(ctx context.Context, req *QueryAllReviewWithReviewedRequest) (*QueryAllReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewWithReviewed not implemented")
}
func (*UnimplementedQueryServer) Purchase(ctx context.Context, req *QueryGetPurchaseRequest) (*QueryGetPurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Purchase not implemented")
}
func (*UnimplementedQueryServer) PurchaseAll(ctx context.Context, req *QueryAllPurchaseRequest) (*QueryAllPurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurchaseAll not implemented")
}
func (*UnimplementedQueryServer) PurchaseWithListing(ctx context.Context, req *QueryAllPurchaseWithListingRequest) (*QueryAllPurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurchaseWithListing not implemented")
}
func (*UnimplementedQueryServer) PurchaseWithBuyer(ctx context.Context, req *QueryAllPurchaseWithBuyerRequest) (*QueryAllPurchaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurchaseWithBuyer not implemented")
}
func (*UnimplementedQueryServer) Listing(ctx context.Context, req *QueryGetListingRequest) (*QueryGetListingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Listing not implemented")
}
func (*UnimplementedQueryServer) ListingAll(ctx context.Context, req *QueryAllListingRequest) (*QueryAllListingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListingAll not implemented")
}
func (*UnimplementedQueryServer) ListingWithSeller(ctx context.Context, req *QueryAllListingWithSellerRequest) (*QueryAllListingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListingWithSeller not implemented")
}
func (*UnimplementedQueryServer) ListingWithReview(ctx context.Context, req *QueryAllListingWithReviewRequest) (*QueryAllListingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListingWithReview not implemented")
}
func (*UnimplementedQueryServer) ListingWithName(ctx context.Context, req *QueryAllListingWithNameRequest) (*QueryAllListingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListingWithName not implemented")
}
func (*UnimplementedQueryServer) Account(ctx context.Context, req *QueryGetAccountRequest) (*QueryGetAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Account not implemented")
}
func (*UnimplementedQueryServer) AccountWallet(ctx context.Context, req *QueryGetAccountWithWalletRequest) (*QueryGetAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountWallet not implemented")
}
func (*UnimplementedQueryServer) AccountAll(ctx context.Context, req *QueryAllAccountRequest) (*QueryAllAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountAll not implemented")
}
func (*UnimplementedQueryServer) AccountWithName(ctx context.Context, req *QueryAllAccountWithNameRequest) (*QueryAllAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountWithName not implemented")
}
func (*UnimplementedQueryServer) AccountWithReview(ctx context.Context, req *QueryAllAccountWithReviewRequest) (*QueryAllAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountWithReview not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Review_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Review(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FloppyDisck.Mercury.Mercury.Query/Review",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Review(ctx, req.(*QueryGetReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ReviewAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ReviewAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FloppyDisck.Mercury.Mercury.Query/ReviewAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ReviewAll(ctx, req.(*QueryAllReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ReviewWithScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllReviewWithScoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ReviewWithScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FloppyDisck.Mercury.Mercury.Query/ReviewWithScore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ReviewWithScore(ctx, req.(*QueryAllReviewWithScoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ReviewWithReviewer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllReviewWithReviewerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ReviewWithReviewer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FloppyDisck.Mercury.Mercury.Query/ReviewWithReviewer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ReviewWithReviewer(ctx, req.(*QueryAllReviewWithReviewerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ReviewWithReviewed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllReviewWithReviewedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ReviewWithReviewed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FloppyDisck.Mercury.Mercury.Query/ReviewWithReviewed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ReviewWithReviewed(ctx, req.(*QueryAllReviewWithReviewedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Purchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Purchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FloppyDisck.Mercury.Mercury.Query/Purchase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Purchase(ctx, req.(*QueryGetPurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PurchaseAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PurchaseAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FloppyDisck.Mercury.Mercury.Query/PurchaseAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PurchaseAll(ctx, req.(*QueryAllPurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PurchaseWithListing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPurchaseWithListingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PurchaseWithListing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FloppyDisck.Mercury.Mercury.Query/PurchaseWithListing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PurchaseWithListing(ctx, req.(*QueryAllPurchaseWithListingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PurchaseWithBuyer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPurchaseWithBuyerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PurchaseWithBuyer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FloppyDisck.Mercury.Mercury.Query/PurchaseWithBuyer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PurchaseWithBuyer(ctx, req.(*QueryAllPurchaseWithBuyerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Listing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetListingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Listing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FloppyDisck.Mercury.Mercury.Query/Listing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Listing(ctx, req.(*QueryGetListingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListingAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllListingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListingAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FloppyDisck.Mercury.Mercury.Query/ListingAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListingAll(ctx, req.(*QueryAllListingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListingWithSeller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllListingWithSellerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListingWithSeller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FloppyDisck.Mercury.Mercury.Query/ListingWithSeller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListingWithSeller(ctx, req.(*QueryAllListingWithSellerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListingWithReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllListingWithReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListingWithReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FloppyDisck.Mercury.Mercury.Query/ListingWithReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListingWithReview(ctx, req.(*QueryAllListingWithReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListingWithName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllListingWithNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListingWithName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FloppyDisck.Mercury.Mercury.Query/ListingWithName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListingWithName(ctx, req.(*QueryAllListingWithNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Account_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Account(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FloppyDisck.Mercury.Mercury.Query/Account",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Account(ctx, req.(*QueryGetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AccountWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAccountWithWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AccountWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FloppyDisck.Mercury.Mercury.Query/AccountWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AccountWallet(ctx, req.(*QueryGetAccountWithWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AccountAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AccountAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FloppyDisck.Mercury.Mercury.Query/AccountAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AccountAll(ctx, req.(*QueryAllAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AccountWithName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAccountWithNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AccountWithName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FloppyDisck.Mercury.Mercury.Query/AccountWithName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AccountWithName(ctx, req.(*QueryAllAccountWithNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AccountWithReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAccountWithReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AccountWithReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FloppyDisck.Mercury.Mercury.Query/AccountWithReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AccountWithReview(ctx, req.(*QueryAllAccountWithReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "FloppyDisck.Mercury.Mercury.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Review",
			Handler:    _Query_Review_Handler,
		},
		{
			MethodName: "ReviewAll",
			Handler:    _Query_ReviewAll_Handler,
		},
		{
			MethodName: "ReviewWithScore",
			Handler:    _Query_ReviewWithScore_Handler,
		},
		{
			MethodName: "ReviewWithReviewer",
			Handler:    _Query_ReviewWithReviewer_Handler,
		},
		{
			MethodName: "ReviewWithReviewed",
			Handler:    _Query_ReviewWithReviewed_Handler,
		},
		{
			MethodName: "Purchase",
			Handler:    _Query_Purchase_Handler,
		},
		{
			MethodName: "PurchaseAll",
			Handler:    _Query_PurchaseAll_Handler,
		},
		{
			MethodName: "PurchaseWithListing",
			Handler:    _Query_PurchaseWithListing_Handler,
		},
		{
			MethodName: "PurchaseWithBuyer",
			Handler:    _Query_PurchaseWithBuyer_Handler,
		},
		{
			MethodName: "Listing",
			Handler:    _Query_Listing_Handler,
		},
		{
			MethodName: "ListingAll",
			Handler:    _Query_ListingAll_Handler,
		},
		{
			MethodName: "ListingWithSeller",
			Handler:    _Query_ListingWithSeller_Handler,
		},
		{
			MethodName: "ListingWithReview",
			Handler:    _Query_ListingWithReview_Handler,
		},
		{
			MethodName: "ListingWithName",
			Handler:    _Query_ListingWithName_Handler,
		},
		{
			MethodName: "Account",
			Handler:    _Query_Account_Handler,
		},
		{
			MethodName: "AccountWallet",
			Handler:    _Query_AccountWallet_Handler,
		},
		{
			MethodName: "AccountAll",
			Handler:    _Query_AccountAll_Handler,
		},
		{
			MethodName: "AccountWithName",
			Handler:    _Query_AccountWithName_Handler,
		},
		{
			MethodName: "AccountWithReview",
			Handler:    _Query_AccountWithReview_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Mercury/query.proto",
}

func (m *QueryGetReviewRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReviewRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReviewRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetReviewResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReviewResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReviewResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Review != nil {
		{
			size, err := m.Review.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllReviewRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllReviewRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllReviewRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllReviewWithScoreRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllReviewWithScoreRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllReviewWithScoreRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Score != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllReviewWithReviewerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllReviewWithReviewerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllReviewWithReviewerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllReviewWithReviewedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllReviewWithReviewedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllReviewWithReviewedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllReviewResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllReviewResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllReviewResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Review) > 0 {
		for iNdEx := len(m.Review) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Review[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPurchaseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPurchaseRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPurchaseRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPurchaseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPurchaseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPurchaseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Purchase != nil {
		{
			size, err := m.Purchase.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPurchaseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPurchaseRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPurchaseRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPurchaseWithListingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPurchaseWithListingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPurchaseWithListingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Listing != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Listing))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPurchaseWithBuyerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPurchaseWithBuyerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPurchaseWithBuyerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Buyer) > 0 {
		i -= len(m.Buyer)
		copy(dAtA[i:], m.Buyer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Buyer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPurchaseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPurchaseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPurchaseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Purchase) > 0 {
		for iNdEx := len(m.Purchase) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Purchase[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetListingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetListingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetListingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetListingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetListingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetListingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Listing != nil {
		{
			size, err := m.Listing.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllListingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllListingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllListingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllListingWithSellerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllListingWithSellerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllListingWithSellerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Seller) > 0 {
		i -= len(m.Seller)
		copy(dAtA[i:], m.Seller)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Seller)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllListingWithReviewRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllListingWithReviewRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllListingWithReviewRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Review != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Review))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllListingWithNameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllListingWithNameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllListingWithNameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllListingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllListingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllListingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Listing) > 0 {
		for iNdEx := len(m.Listing) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Listing[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAccountWithWalletRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAccountWithWalletRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAccountWithWalletRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAccountWithNameRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAccountWithNameRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAccountWithNameRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAccountWithReviewRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAccountWithReviewRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAccountWithReviewRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Review != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Review))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Account) > 0 {
		for iNdEx := len(m.Account) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Account[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetReviewRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetReviewResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Review != nil {
		l = m.Review.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllReviewRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllReviewWithScoreRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Score != 0 {
		n += 1 + sovQuery(uint64(m.Score))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllReviewWithReviewerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllReviewWithReviewedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllReviewResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Review) > 0 {
		for _, e := range m.Review {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPurchaseRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetPurchaseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Purchase != nil {
		l = m.Purchase.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPurchaseRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPurchaseWithListingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Listing != 0 {
		n += 1 + sovQuery(uint64(m.Listing))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPurchaseWithBuyerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Buyer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPurchaseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Purchase) > 0 {
		for _, e := range m.Purchase {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetListingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetListingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Listing != nil {
		l = m.Listing.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllListingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllListingWithSellerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Seller)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllListingWithReviewRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Review != 0 {
		n += 1 + sovQuery(uint64(m.Review))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllListingWithNameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllListingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Listing) > 0 {
		for _, e := range m.Listing {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetAccountWithWalletRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAccountWithNameRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAccountWithReviewRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Review != 0 {
		n += 1 + sovQuery(uint64(m.Review))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Account) > 0 {
		for _, e := range m.Account {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetReviewRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReviewRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReviewRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReviewResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReviewResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReviewResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Review", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Review == nil {
				m.Review = &Review{}
			}
			if err := m.Review.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllReviewRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllReviewRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllReviewRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllReviewWithScoreRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllReviewWithScoreRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllReviewWithScoreRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllReviewWithReviewerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllReviewWithReviewerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllReviewWithReviewerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllReviewWithReviewedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllReviewWithReviewedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllReviewWithReviewedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllReviewResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllReviewResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllReviewResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Review", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Review = append(m.Review, &Review{})
			if err := m.Review[len(m.Review)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPurchaseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPurchaseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPurchaseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPurchaseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPurchaseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPurchaseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Purchase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Purchase == nil {
				m.Purchase = &Purchase{}
			}
			if err := m.Purchase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPurchaseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPurchaseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPurchaseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPurchaseWithListingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPurchaseWithListingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPurchaseWithListingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Listing", wireType)
			}
			m.Listing = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Listing |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPurchaseWithBuyerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPurchaseWithBuyerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPurchaseWithBuyerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buyer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Buyer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPurchaseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPurchaseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPurchaseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Purchase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Purchase = append(m.Purchase, &Purchase{})
			if err := m.Purchase[len(m.Purchase)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetListingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetListingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetListingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetListingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetListingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetListingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Listing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Listing == nil {
				m.Listing = &Listing{}
			}
			if err := m.Listing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllListingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllListingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllListingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllListingWithSellerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllListingWithSellerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllListingWithSellerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seller", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seller = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllListingWithReviewRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllListingWithReviewRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllListingWithReviewRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Review", wireType)
			}
			m.Review = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Review |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllListingWithNameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllListingWithNameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllListingWithNameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllListingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllListingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllListingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Listing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Listing = append(m.Listing, &Listing{})
			if err := m.Listing[len(m.Listing)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAccountWithWalletRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAccountWithWalletRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAccountWithWalletRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Account{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAccountWithNameRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAccountWithNameRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAccountWithNameRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAccountWithReviewRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAccountWithReviewRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAccountWithReviewRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Review", wireType)
			}
			m.Review = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Review |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = append(m.Account, &Account{})
			if err := m.Account[len(m.Account)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
