syntax = "proto3";
package FloppyDisck.Mercury.Mercury;

import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
// this line is used by starport scaffolding # 1
import "Mercury/account.proto";

option go_package = "github.com/FloppyDisck/Mercury/x/Mercury/types";

// Query defines the gRPC querier service.
service Query {
    // this line is used by starport scaffolding # 2
	rpc Account(QueryGetAccountRequest) returns (QueryGetAccountResponse) {
		option (google.api.http).get = "/FloppyDisck/Mercury/Mercury/account/{id}";
	}
	rpc AccountWallet(QueryGetAccountWithWalletRequest) returns (QueryGetAccountResponse) {
		option (google.api.http).get = "/FloppyDisck/Mercury/Mercury/account/wallet/{user}";
	}
	rpc AccountAll(QueryAllAccountRequest) returns (QueryAllAccountResponse) {
		option (google.api.http).get = "/FloppyDisck/Mercury/Mercury/account";
	}
	rpc AccountWithName(QueryAllAccountWithNameRequest) returns (QueryAllAccountResponse) {
		option (google.api.http).get = "/FloppyDisck/Mercury/Mercury/account/name/{name}";
	}
	rpc AccountWithReview(QueryAllAccountWithReviewRequest) returns (QueryAllAccountResponse) {
		option (google.api.http).get = "/FloppyDisck/Mercury/Mercury/account/review/{review}";
	}

}

// this line is used by starport scaffolding # 3
message QueryGetAccountRequest {
	uint64 id = 1;
}

message QueryGetAccountWithWalletRequest {
	string user = 1;
}

message QueryGetAccountResponse {
	Account Account = 1;
}

message QueryAllAccountRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllAccountWithNameRequest {
	string name = 1;
	cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryAllAccountWithReviewRequest {
	uint32 review = 1;
	cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryAllAccountResponse {
	repeated Account Account = 1;
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
